package com.myProject.reflex;

/**
 * 优点：反射提高了程序的灵活性和扩展性，降低耦合性，提高自适应能力。它允许程序创和控制任何类的对象，无需提前硬编码目标类
 * 缺点：性能问题，使用反射基本上是一种解释操作，用于字段和方法接入时要远慢于直接代码
 *
 * 使用场景：
 * 在第三方应用开发过程中，如果某一个类的方法属性是私有的，或者只对应用系统开放，可以通过反射机制获得自己所需要的信息。
 * 当软件中要实现安装插件功能时，由于我们并不知道插件类型，也就无法new一个对象，因此使用反射机制获取插件类，然后再实例化。
 */
public class AaaMarkDown {
}