
回表： 根据查询条件使用联合索引找到联合索引的叶子节点，叶子节点存放的是这一条数据的主键索引，根据主键索引去查主键索引表这个过程叫回表

表结构
ａ　       ｂ　ｃ　ｄ　          ｅ
主键索引　　　ｂｃｄ联合索引　      没有索引

最左前缀原则跟where条件后面的字段顺序是没有关系的，where b=1 and c=1 and d=1 和 where d=1 and b=1 and c=1 是没有区别的

最左前缀原则指的是联合索引需要用到的第一个字段存在于where后的条件中，那么第一个字段就是符合最左前缀原则的，
bcd索引第一个字段是b，如果b存在于where条件后，那么就是符合最左前缀原则的
where b=1 and d=1 也能走索引，通过b=1就可以确定索引要寻找的方向
mysql5.x之后，在使用b=1确定索引寻找的方向的基础上确定结果后，继续使用d=1又做一遍过滤，过滤后可以减少回表的次数



非索引字段作为查询条件时，叶子节点从左往右所有数据都找一遍，做了一次“全表扫描”
通过索引字段作为查询条件时，从B+树从上往下查找，这就是走了索引


InnerDB是怎么样执行范围查找的
select * from student where id > 6;
先找到主键索引a = 6，然后把这个索引后面的数据返回。

三层B+数能存多少数据？
假设主键是一个int节点
B+树中一个节点是16kb，一个int类型占4B 一个指针占6B，
(16 * 1024) / 10b = 1638
-- 第一层 根节点
根节点中可以有1638个小节点，1638个小节点都可以用来连接下一层的内部节点，
-- 第二层 内部节点
一个内部节点也可以连接1638个叶子节点
总共可以开放给第三层 1638 * 1638 = 2683044内部节点， 每一个内部节点都可以连接一条叶子节点
-- 第三层 叶子节点
假设一条数据是1KB，每个叶子节点可以存放（16kb / 1kb） = 16条数据
1638 * 1638 * 16 = 42928704 条数据

